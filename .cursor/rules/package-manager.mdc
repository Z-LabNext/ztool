---
description: '包管理器规范 - 优先使用pnpm'
globs: package.json,pnpm-lock.yaml,*.lock
---

# 包管理器规范

## 🎯 核心原则

**项目统一使用pnpm作为包管理器，禁止使用npm和yarn**

## 📋 包管理器优先级

1. **pnpm** (优先) - 高效、严格、节省空间
2. npm (备选) - 仅在特殊情况下使用
3. yarn (禁止) - 不推荐使用

## ✅ 正确的pnpm命令

### 依赖管理

```bash
# 安装所有依赖
pnpm install

# 添加生产依赖
pnpm add <package-name>

# 添加开发依赖
pnpm add -D <package-name>

# 添加全局依赖
pnpm add -g <package-name>

# 移除依赖
pnpm remove <package-name>

# 更新依赖
pnpm update

# 更新特定依赖
pnpm update <package-name>
```

### 脚本执行

```bash
# 运行脚本
pnpm run <script-name>

# 运行测试
pnpm test

# 运行构建
pnpm run build

# 运行开发服务器
pnpm run dev
```

### 版本管理

```bash
# 版本管理
pnpm version patch    # 修订版本 (1.0.0 -> 1.0.1)
pnpm version minor    # 次版本 (1.0.0 -> 1.1.0)
pnpm version major    # 主版本 (1.0.0 -> 2.0.0)
```

### 发布管理

```bash
# 发布到npm
pnpm publish

# 发布到特定registry
pnpm publish --registry <registry-url>
```

## ❌ 禁止使用的命令

### npm命令 (禁止)

```bash
# ❌ 禁止使用
npm install
npm add <package>
npm remove <package>
npm run <script>
npm version <type>
npm publish
```

### yarn命令 (禁止)

```bash
# ❌ 禁止使用
yarn install
yarn add <package>
yarn remove <package>
yarn run <script>
yarn version <type>
yarn publish
```

## 🔧 项目配置

### package.json脚本

```json
{
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "test": "vitest",
    "preview": "vite preview",
    "lint": "eslint src --ext .ts,.tsx",
    "format": "prettier --write src/**/*.{ts,tsx,js,jsx}"
  }
}
```

### pnpm配置 (.npmrc)

```ini
# 使用pnpm作为包管理器
package-manager=pnpm

# 严格模式
strict-peer-dependencies=false

# 自动安装peer依赖
auto-install-peers=true

# 使用符号链接
symlink=true
```

## 🚀 pnpm优势

### 1. 性能优势

- **更快的安装速度** - 并行下载和安装
- **节省磁盘空间** - 全局存储，避免重复下载
- **更快的CI/CD** - 缓存机制优化

### 2. 严格性优势

- **严格的依赖解析** - 避免幽灵依赖
- **更好的安全性** - 防止依赖污染
- **更清晰的依赖树** - 扁平化结构

### 3. 开发体验

- **更好的错误信息** - 清晰的错误提示
- **更快的脚本执行** - 优化的脚本运行
- **更好的工作区支持** - monorepo友好

## 📁 文件结构

### 必需文件

```
项目根目录/
├── package.json          # 项目配置
├── pnpm-lock.yaml        # 依赖锁定文件
└── .npmrc                # pnpm配置 (可选)
```

### 忽略文件

```
# .gitignore 中应包含
node_modules/
.pnpm-store/
```

## 🔍 故障排除

### 常见问题

1. **依赖冲突** - 使用 `pnpm why <package>` 查看依赖关系
2. **缓存问题** - 使用 `pnpm store prune` 清理缓存
3. **权限问题** - 检查文件权限和用户权限

### 调试命令

```bash
# 查看依赖树
pnpm list

# 查看特定包的依赖
pnpm why <package-name>

# 查看过时的包
pnpm outdated

# 清理缓存
pnpm store prune
```

## 📊 性能对比

| 特性     | pnpm       | npm    | yarn     |
| -------- | ---------- | ------ | -------- |
| 安装速度 | ⭐⭐⭐⭐⭐ | ⭐⭐⭐ | ⭐⭐⭐⭐ |
| 磁盘使用 | ⭐⭐⭐⭐⭐ | ⭐⭐   | ⭐⭐⭐   |
| 安全性   | ⭐⭐⭐⭐⭐ | ⭐⭐⭐ | ⭐⭐⭐⭐ |
| 严格性   | ⭐⭐⭐⭐⭐ | ⭐⭐   | ⭐⭐⭐   |

## 🎯 最佳实践

### 1. 依赖管理

- 使用 `pnpm add` 而不是 `npm install`
- 定期运行 `pnpm update` 更新依赖
- 使用 `pnpm audit` 检查安全漏洞

### 2. 脚本执行

- 所有脚本通过 `pnpm run` 执行
- 避免直接使用 `npm run` 或 `yarn run`

### 3. 版本控制

- 提交 `pnpm-lock.yaml` 到版本控制
- 不要提交 `node_modules/` 目录
- 使用 `pnpm version` 管理版本号

### 4. 团队协作

- 确保所有团队成员使用pnpm
- 在README中说明包管理器要求
- 在CI/CD中使用pnpm命令

## ⚠️ 重要提醒

1. **统一性** - 整个项目必须使用pnpm
2. **一致性** - 所有脚本和命令必须使用pnpm
3. **兼容性** - 确保pnpm-lock.yaml文件被正确管理
4. **性能** - 利用pnpm的性能优势提升开发效率

---

**记住：pnpm不是可选项，是必需项！**
