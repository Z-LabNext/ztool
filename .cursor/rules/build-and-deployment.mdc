---
description: "构建和部署相关规范"
---

# 构建和部署规范

## 构建配置
基于 [vite.config.ts](mdc:vite.config.ts) 的构建配置：

### 构建目标
- **ES模块**: `dist/es/ztool.min.js`
- **CommonJS**: `dist/cjs/ztool.min.js`
- **类型定义**: `dist/types/main.d.ts`

### 构建脚本
```bash
# 开发构建
npm run build

# 运行测试
npm run test

# 代码格式化
npm run prettier
```

## 包发布规范
基于 [package.json](mdc:package.json) 的发布配置：

### 版本管理
- 使用语义化版本控制 (SemVer)
- 当前版本：1.0.13
- 发布到公共npm仓库

### 文件包含
```json
{
  "files": ["dist"]
}
```

### 导出配置
```json
{
  "exports": {
    ".": {
      "types": "./dist/types/main.d.ts",
      "import": "./dist/es/ztool.min.js",
      "require": "./dist/cjs/ztool.min.js"
    }
  }
}
```

## 代码质量保证
### Prettier配置
- 自动格式化所有文件
- 忽略未知文件类型
- 在提交前自动运行

### Husky + lint-staged
- 提交前自动运行Prettier
- 确保代码风格一致性

## 开发工作流
1. **开发**: 在 `src/` 目录下编写代码
2. **测试**: 运行 `npm run test` 验证功能
3. **格式化**: 运行 `npm run prettier` 格式化代码
4. **构建**: 运行 `npm run build` 生成发布文件
5. **发布**: 使用 `npm publish` 发布到npm

## 构建优化
- 生产环境启用代码压缩
- 分离第三方依赖到vendor chunk
- 支持Tree Shaking
- 生成Source Map（开发环境）

## 环境变量
- `__APP_NAME__`: 应用名称
- `__APP_VERSION__`: 应用版本

## 示例和文档
- 示例代码位于 `examples/` 目录
- 包含merger和tools的使用示例
- 提供Web界面演示

## 部署检查清单
- [ ] 所有测试通过
- [ ] 代码格式化完成
- [ ] 构建无错误
- [ ] 类型定义生成正确
- [ ] 包大小合理
- [ ] 版本号正确更新